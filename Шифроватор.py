import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
import base64
import os
import threading
import string
import platform

class CryptoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        self.root.geometry("800x700")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π
        self.public_key = None
        self.private_key = None
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_control = ttk.Notebook(root)
        
        self.symmetric_tab = ttk.Frame(self.tab_control)
        self.asymmetric_tab = ttk.Frame(self.tab_control)
        self.file_tab = ttk.Frame(self.tab_control)
        self.about_tab = ttk.Frame(self.tab_control)
        
        self.tab_control.add(self.symmetric_tab, text='–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ (AES)')
        self.tab_control.add(self.asymmetric_tab, text='–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ (RSA)')
        self.tab_control.add(self.file_tab, text='–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤')
        self.tab_control.add(self.about_tab, text='–û –ø—Ä–æ–≥—Ä–∞–º–º–µ')
        
        self.tab_control.pack(expand=1, fill='both')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
        self.setup_symmetric_tab()
        self.setup_asymmetric_tab()
        self.setup_file_tab()
        self.setup_about_tab()
    
    def setup_symmetric_tab(self):
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        text_frame = ttk.Frame(self.symmetric_tab)
        text_frame.pack(pady=5, fill=tk.X, padx=10)
        
        ttk.Label(text_frame, text="–¢–µ–∫—Å—Ç:").pack(side=tk.LEFT)
        ttk.Button(text_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text).pack(side=tk.RIGHT, padx=5)
        
        self.sym_text = tk.Text(self.symmetric_tab, height=5)
        self.sym_text.pack(pady=5, fill=tk.X, padx=10)
        
        # –ü–∞—Ä–æ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏
        password_frame = ttk.Frame(self.symmetric_tab)
        password_frame.pack(pady=5, fill=tk.X, padx=10)
        
        ttk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:").pack(side=tk.LEFT)
        self.password_entry = ttk.Entry(password_frame, show="*")
        self.password_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º
        ttk.Button(password_frame, text="üìã", width=3, command=self.copy_password).pack(side=tk.LEFT, padx=2)
        ttk.Button(password_frame, text="üìÑ", width=3, command=self.paste_password).pack(side=tk.LEFT, padx=2)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        btn_frame = ttk.Frame(self.symmetric_tab)
        btn_frame.pack(pady=10)
        
        ttk.Button(btn_frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", command=self.encrypt_symmetric).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", command=self.decrypt_symmetric).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_symmetric).pack(side=tk.LEFT, padx=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        result_frame = ttk.Frame(self.symmetric_tab)
        result_frame.pack(pady=5, fill=tk.X, padx=10)
        
        ttk.Label(result_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:").pack(side=tk.LEFT)
        ttk.Button(result_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_symmetric_result).pack(side=tk.RIGHT, padx=5)
        
        self.sym_result = tk.Text(self.symmetric_tab, height=5)
        self.sym_result.pack(pady=5, fill=tk.BOTH, expand=True, padx=10)
    
    def setup_asymmetric_tab(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
        key_frame = ttk.LabelFrame(self.asymmetric_tab, text="–ö–ª—é—á–∏")
        key_frame.pack(pady=5, fill=tk.X, padx=10)
        
        ttk.Button(key_frame, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏", command=self.generate_keys).pack(pady=5, side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π
        ttk.Button(key_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á", command=self.load_public_key).pack(pady=5, side=tk.LEFT, padx=5)
        ttk.Button(key_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á", command=self.load_private_key).pack(pady=5, side=tk.LEFT, padx=5)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏
        text_input_frame = ttk.Frame(self.asymmetric_tab)
        text_input_frame.pack(pady=5, fill=tk.X, padx=10)
        
        ttk.Label(text_input_frame, text="–¢–µ–∫—Å—Ç:").pack(side=tk.LEFT)
        ttk.Button(text_input_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_asym_text).pack(side=tk.RIGHT, padx=5)
        
        self.asym_text = tk.Text(self.asymmetric_tab, height=5)
        self.asym_text.pack(pady=5, fill=tk.X, padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_btn_frame = ttk.Frame(self.asymmetric_tab)
        text_btn_frame.pack(pady=10)
        
        ttk.Button(text_btn_frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", command=self.encrypt_asymmetric).pack(side=tk.LEFT, padx=5)
        ttk.Button(text_btn_frame, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", command=self.decrypt_asymmetric).pack(side=tk.LEFT, padx=5)
        ttk.Button(text_btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_asymmetric).pack(side=tk.LEFT, padx=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        result_frame = ttk.Frame(self.asymmetric_tab)
        result_frame.pack(pady=5, fill=tk.X, padx=10)
        
        ttk.Label(result_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:").pack(side=tk.LEFT)
        ttk.Button(result_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_asymmetric_result).pack(side=tk.RIGHT, padx=5)
        
        self.asym_result = tk.Text(self.asymmetric_tab, height=5)
        self.asym_result.pack(pady=5, fill=tk.BOTH, expand=True, padx=10)
        
        # –†–∞–∑–¥–µ–ª: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        file_frame = ttk.LabelFrame(self.asymmetric_tab, text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫")
        file_frame.pack(pady=10, fill=tk.X, padx=10)
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –∏–ª–∏ –¥–∏—Å–∫–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encrypt_path_frame = ttk.Frame(file_frame)
        encrypt_path_frame.pack(pady=5, fill=tk.X, padx=5)
        
        ttk.Label(encrypt_path_frame, text="–®–∏—Ñ—Ä–æ–≤–∞—Ç—å:").pack(side=tk.LEFT)
        self.encrypt_path = tk.StringVar()
        ttk.Entry(encrypt_path_frame, textvariable=self.encrypt_path, state='readonly').pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        ttk.Button(encrypt_path_frame, text="–ü–∞–ø–∫–∞", command=lambda: self.select_path("folder", "encrypt")).pack(side=tk.LEFT, padx=2)
        
        # –î–ª—è Windows –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–∏—Å–∫–∞
        if platform.system() == "Windows":
            ttk.Button(encrypt_path_frame, text="–î–∏—Å–∫", command=lambda: self.select_path("drive", "encrypt")).pack(side=tk.LEFT, padx=2)
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –∏–ª–∏ –¥–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        decrypt_path_frame = ttk.Frame(file_frame)
        decrypt_path_frame.pack(pady=5, fill=tk.X, padx=5)
        
        ttk.Label(decrypt_path_frame, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:").pack(side=tk.LEFT)
        self.decrypt_path = tk.StringVar()
        ttk.Entry(decrypt_path_frame, textvariable=self.decrypt_path, state='readonly').pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        ttk.Button(decrypt_path_frame, text="–ü–∞–ø–∫–∞", command=lambda: self.select_path("folder", "decrypt")).pack(side=tk.LEFT, padx=2)
        
        # –î–ª—è Windows –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–∏—Å–∫–∞
        if platform.system() == "Windows":
            ttk.Button(decrypt_path_frame, text="–î–∏—Å–∫", command=lambda: self.select_path("drive", "decrypt")).pack(side=tk.LEFT, padx=2)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        ttk.Label(file_frame, text="–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").pack(pady=5)
        self.asym_extensions = ttk.Entry(file_frame)
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –§–û–†–ú–ê–¢–û–í
        extensions_str = "doc,docx,xls,xlsx,ppt,pptx,pdf,txt,rtf,odt,ods,odp,mp3,wav,flac,aac,ogg,wma,m4a,avi,mov,mkv,flv,wmv,webm,mpeg,mpg,zip,rar,7z,tar,gz,exe,msi,dmg,apk,app,bat,sh,html,htm,css,js,php,xml,json,csv,sql,db,sqlite,dat,log,ini,cfg,dll,sys,iso,raw,mdb,accdb,mp4,jpeg,png,tiff,dt,lic,1cd,scv,gif,bmp,svg,webp,ico,psd,ai,eps,heic,heif,aiff,aif,opus,mid,midi,ac3,m4v,3gp,vob,ts,m2ts,ogv,rm,rmvb,asf,md,tex,epub,pages,numbers,key,djvu,yaml,yml,bz2,xz,cab,jar,war,ear,img,cmd,ps1,py,vbs,com,so,dylib,xhtml,ts,jsx,vue,less,sass,scss,asp,aspx,jsp,sqlite3,dbf,frm,myd,ndf,mdf,ldf,ora,pdb,inf,reg,bak,old,lock,tmp,vcf,ics,eml,pst,ost,torrent,cue,sub,srt,stl,blend,fbx,obj,step,iges,3mf,amf,der,pfx,key,crt,csr,p12,pem,sxw,stw,3ds,max,3dm,sxc,stc,dif,slk,wb2,sxd,std,sxm,sqlitedb,accdb,dbf,odb,ldf,cpp,pas,asm,sch,class,swf,fla,mid,m3u,m4u,tiff,tif,backup,tgz,ARC,vmdk,vdi,sldm,sldx,sti,sxi,dwg,wk1,wks,msg,ppsx,ppsm,pps,pot,pptm,xltm,xltx,xlc,xlm,xlt,xlw,xlsb,dotm,dot,docm,deb,skp,pln,pla,bpn,h264,h265,mjpeg,bck,arw,nef,dds,mobi"
        self.asym_extensions.insert(0, extensions_str)
        self.asym_extensions.pack(pady=5, fill=tk.X, padx=10)
        
        # –û–ø—Ü–∏–∏
        options_frame = ttk.Frame(file_frame)
        options_frame.pack(pady=10, fill=tk.X, padx=10)
        
        self.asym_recursive = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥", variable=self.asym_recursive).pack(side=tk.LEFT, padx=5)
        
        self.asym_delete_original = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã", variable=self.asym_delete_original).pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        file_btn_frame = ttk.Frame(file_frame)
        file_btn_frame.pack(pady=10)
        
        ttk.Button(file_btn_frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", command=self.encrypt_asym_folder).pack(side=tk.LEFT, padx=5)
        ttk.Button(file_btn_frame, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", command=self.decrypt_asym_folder).pack(side=tk.LEFT, padx=5)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_frame = ttk.Frame(file_frame)
        log_frame.pack(pady=5, fill=tk.BOTH, expand=True)
        
        ttk.Label(log_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:").pack(anchor=tk.W)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ª–æ–≥–∞ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        log_container = ttk.Frame(log_frame)
        log_container.pack(fill=tk.BOTH, expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(log_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.asym_log = tk.Text(log_container, height=8, yscrollcommand=scrollbar.set)
        self.asym_log.pack(pady=5, fill=tk.BOTH, expand=True, padx=10)
        self.asym_log.config(state=tk.DISABLED)
        
        scrollbar.config(command=self.asym_log.yview)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        progress_frame = ttk.Frame(file_frame)
        progress_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        self.asym_progress_var = tk.StringVar(value="–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%")
        ttk.Label(progress_frame, textvariable=self.asym_progress_var).pack(anchor=tk.W)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.asym_progress = ttk.Progressbar(progress_frame, orient=tk.HORIZONTAL, mode='determinate')
        self.asym_progress.pack(fill=tk.X, pady=2)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        self.current_file_var = tk.StringVar(value="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ")
        ttk.Label(progress_frame, textvariable=self.current_file_var, anchor=tk.W).pack(fill=tk.X, pady=2)
    
    def setup_file_tab(self):
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.Frame(self.file_tab)
        folder_frame.pack(pady=10, fill=tk.X, padx=10)
        
        ttk.Label(folder_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:").pack(side=tk.LEFT)
        self.folder_path = tk.StringVar()
        ttk.Entry(folder_frame, textvariable=self.folder_path, state='readonly').pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        ttk.Button(folder_frame, text="–û–±–∑–æ—Ä", command=self.select_folder).pack(side=tk.LEFT)
        
        # –ü–∞—Ä–æ–ª—å –¥–ª—è —Ñ–∞–π–ª–æ–≤
        ttk.Label(self.file_tab, text="–ü–∞—Ä–æ–ª—å:").pack(pady=5)
        self.file_password = ttk.Entry(self.file_tab, show="*")
        self.file_password.pack(pady=5, fill=tk.X, padx=10)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        ttk.Label(self.file_tab, text="–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").pack(pady=5)
        self.file_extensions = ttk.Entry(self.file_tab)
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –§–û–†–ú–ê–¢–û–í
        extensions_str = "doc,docx,xls,xlsx,ppt,pptx,pdf,txt,rtf,odt,ods,odp,mp3,wav,flac,aac,ogg,wma,m4a,avi,mov,mkv,flv,wmv,webm,mpeg,mpg,zip,rar,7z,tar,gz,exe,msi,dmg,apk,app,bat,sh,html,htm,css,js,php,xml,json,csv,sql,db,sqlite,dat,log,ini,cfg,dll,sys,iso,raw,mdb,accdb,mp4,jpeg,png,tiff,dt,lic,1cd,scv,gif,bmp,svg,webp,ico,psd,ai,eps,heic,heif,aiff,aif,opus,mid,midi,ac3,m4v,3gp,vob,ts,m2ts,ogv,rm,rmvb,asf,md,tex,epub,pages,numbers,key,djvu,yaml,yml,bz2,xz,cab,jar,war,ear,img,cmd,ps1,py,vbs,com,so,dylib,xhtml,ts,jsx,vue,less,sass,scss,asp,aspx,jsp,sqlite3,dbf,frm,myd,ndf,mdf,ldf,ora,pdb,inf,reg,bak,old,lock,tmp,vcf,ics,eml,pst,ost,torrent,cue,sub,srt,stl,blend,fbx,obj,step,iges,3mf,amf,der,pfx,key,crt,csr,p12,pem,sxw,stw,3ds,max,3dm,sxc,stc,dif,slk,wb2,sxd,std,sxm,sqlitedb,accdb,dbf,odb,ldf,cpp,pas,asm,sch,class,swf,fla,mid,m3u,m4u,tiff,tif,backup,tgz,ARC,vmdk,vdi,sldm,sldx,sti,sxi,dwg,wk1,wks,msg,ppsx,ppsm,pps,pot,pptm,xltm,xltx,xlc,xlm,xlt,xlw,xlsb,dotm,dot,docm,deb,skp,pln,pla,bpn,h264,h265,mjpeg,bck,arw,nef,dds,mobi"
        self.file_extensions.insert(0, extensions_str)
        self.file_extensions.pack(pady=5, fill=tk.X, padx=10)
        
        # –û–ø—Ü–∏–∏
        options_frame = ttk.Frame(self.file_tab)
        options_frame.pack(pady=10, fill=tk.X, padx=10)
        
        self.recursive_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥", variable=self.recursive_var).pack(side=tk.LEFT, padx=5)
        
        self.delete_original = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã", variable=self.delete_original).pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(self.file_tab)
        btn_frame.pack(pady=10)
        
        ttk.Button(btn_frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É", command=self.encrypt_folder).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É", command=self.decrypt_folder).pack(side=tk.LEFT, padx=5)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_frame = ttk.Frame(self.file_tab)
        log_frame.pack(pady=5, fill=tk.BOTH, expand=True)
        
        ttk.Label(log_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:").pack(anchor=tk.W)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ª–æ–≥–∞ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        log_container = ttk.Frame(log_frame)
        log_container.pack(fill=tk.BOTH, expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(log_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.file_log = tk.Text(log_container, height=10, yscrollcommand=scrollbar.set)
        self.file_log.pack(pady=5, fill=tk.BOTH, expand=True, padx=10)
        self.file_log.config(state=tk.DISABLED)
        
        scrollbar.config(command=self.file_log.yview)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        progress_frame = ttk.Frame(self.file_tab)
        progress_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        self.file_progress_var = tk.StringVar(value="–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%")
        ttk.Label(progress_frame, textvariable=self.file_progress_var).pack(anchor=tk.W)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(progress_frame, orient=tk.HORIZONTAL, mode='determinate')
        self.progress.pack(fill=tk.X, pady=2)
    
    def setup_about_tab(self):
        about_text = """
        –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
        
        –§—É–Ω–∫—Ü–∏–∏:
        1. –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (AES-256)
        2. –ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (RSA-2048)
        3. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö
        4. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª—ã—Ö –¥–∏—Å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ Windows)
        
        –ê–≤—Ç–æ—Ä: –ü–æ–ª—è–∫–æ–≤ –ú–∞–∫—Å–∏–º –ü–∞–≤–ª–æ–≤–∏—á
        –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: comp-48@mail.ru
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        - Python 3.8+
        - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ cryptography
        - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ tkinter
        
        –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        - –°—Ç–æ–π–∫–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π
        - –ü–∞–∫–µ—Ç–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        - –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫ –∏ –¥–∏—Å–∫–æ–≤
        - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á–µ–π –∏ —Ç–µ–∫—Å—Ç–∞
        - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
        - –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        - –û—Ç–¥–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        - –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        
        ttk.Label(self.about_tab, text=about_text, justify=tk.LEFT).pack(pady=20, padx=10, anchor=tk.W)
    
    def select_folder(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        if folder:
            self.folder_path.set(folder)
    
    def select_path(self, path_type, operation_type):
        if path_type == "folder":
            path = filedialog.askdirectory(title=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è {operation_type}")
        elif path_type == "drive" and platform.system() == "Windows":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤
            drives = [f"{d}:\\" for d in string.ascii_uppercase if os.path.exists(f"{d}:\\")]
            if not drives:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Å–∫–∞
            drive_dialog = tk.Toplevel(self.root)
            drive_dialog.title(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è {operation_type}")
            drive_dialog.geometry("300x200")
            drive_dialog.resizable(False, False)
            drive_dialog.transient(self.root)
            drive_dialog.grab_set()
            
            ttk.Label(drive_dialog, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è {operation_type}:").pack(pady=10)
            
            drive_frame = ttk.Frame(drive_dialog)
            drive_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
            for drive in drives:
                ttk.Button(
                    drive_frame, 
                    text=drive, 
                    width=20,
                    command=lambda d=drive, op=operation_type: self.set_drive(d, op, drive_dialog)
                ).pack(pady=2)
            
            return
        else:
            return
        
        if path:
            if operation_type == "encrypt":
                self.encrypt_path.set(path)
            else:
                self.decrypt_path.set(path)
    
    def set_drive(self, drive, operation_type, dialog):
        if operation_type == "encrypt":
            self.encrypt_path.set(drive)
        else:
            self.decrypt_path.set(drive)
        dialog.destroy()
    
    def derive_key(self, password, salt):
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=default_backend()
        )
        return base64.urlsafe_b64encode(kdf.derive(password.encode()))
    
    def log_message(self, message, tab="file", asym=False):
        def _log():
            if tab == "file":
                if asym:
                    self.asym_log.config(state=tk.NORMAL)
                    self.asym_log.insert(tk.END, message + "\n")
                    self.asym_log.see(tk.END)
                    self.asym_log.config(state=tk.DISABLED)
                else:
                    self.file_log.config(state=tk.NORMAL)
                    self.file_log.insert(tk.END, message + "\n")
                    self.file_log.see(tk.END)
                    self.file_log.config(state=tk.DISABLED)
            else:
                self.sym_result.insert(tk.END, message + "\n")
        self.root.after(0, _log)
    
    def encrypt_file(self, file_path, password):
        try:
            salt = os.urandom(16)
            key = self.derive_key(password, salt)
            f = Fernet(key)
            
            with open(file_path, 'rb') as file:
                original = file.read()
            
            encrypted = f.encrypt(original)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ª—å –≤–º–µ—Å—Ç–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            with open(file_path + '.enc', 'wb') as file:
                file.write(salt + encrypted)
            
            return True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {str(e)}")
            return False
    
    def decrypt_file(self, file_path, password):
        try:
            with open(file_path, 'rb') as file:
                data = file.read()
            
            salt = data[:16]
            encrypted = data[16:]
            
            key = self.derive_key(password, salt)
            f = Fernet(key)
            decrypted = f.decrypt(encrypted)
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .enc –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            if file_path.endswith('.enc'):
                output_path = file_path[:-4]
            else:
                output_path = file_path + '.dec'
                
            with open(output_path, 'wb') as file:
                file.write(decrypted)
            
            return True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ {file_path}: {str(e)}")
            return False
    
    def encrypt_file_asymmetric(self, file_path):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (RSA + AES)"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –∫–ª—é—á
            symmetric_key = Fernet.generate_key()
            f = Fernet(symmetric_key)
            
            # –®–∏—Ñ—Ä—É–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
            with open(file_path, 'rb') as file:
                original = file.read()
            
            encrypted_data = f.encrypt(original)
            
            # –®–∏—Ñ—Ä—É–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –∫–ª—é—á —Å –ø–æ–º–æ—â—å—é RSA
            encrypted_key = self.public_key.encrypt(
                symmetric_key,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–∞–Ω–Ω—ã–µ
            with open(file_path + '.rsa', 'wb') as file:
                file.write(encrypted_key + encrypted_data)
            
            return True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {str(e)}", asym=True)
            return False
    
    def decrypt_file_asymmetric(self, file_path):
        """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (RSA + AES)"""
        try:
            with open(file_path, 'rb') as file:
                data = file.read()
            
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è RSA-2048
            key_size = 256  # 2048 –±–∏—Ç / 8 –±–∞–π—Ç
            encrypted_key = data[:key_size]
            encrypted_data = data[key_size:]
            
            # –î–µ—à–∏—Ñ—Ä—É–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –∫–ª—é—á
            symmetric_key = self.private_key.decrypt(
                encrypted_key,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            
            # –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
            f = Fernet(symmetric_key)
            decrypted_data = f.decrypt(encrypted_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if file_path.endswith('.rsa'):
                output_path = file_path[:-4]
            else:
                output_path = file_path + '.dec'
                
            with open(output_path, 'wb') as file:
                file.write(decrypted_data)
            
            return True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ {file_path}: {str(e)}", asym=True)
            return False
    
    def process_folder(self, operation, password, extensions, recursive, delete_original, asymmetric=False, path=None):
        if not path:
            if asymmetric and operation == "encrypt":
                path = self.encrypt_path.get()
            elif asymmetric and operation == "decrypt":
                path = self.decrypt_path.get()
            else:
                path = self.folder_path.get()
        
        if not path or not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        files_to_process = []
        if recursive:
            for root, dirs, files in os.walk(path):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
                try:
                    for file in files:
                        file_path = os.path.join(root, file)
                        _, file_ext = os.path.splitext(file)
                        if file_ext.lower() in extensions:
                            files_to_process.append(file_path)
                except PermissionError:
                    continue
        else:
            if os.path.isfile(path):
                _, file_ext = os.path.splitext(path)
                if file_ext.lower() in extensions:
                    files_to_process = [path]
            else:
                for file in os.listdir(path):
                    file_path = os.path.join(path, file)
                    if os.path.isfile(file_path):
                        _, file_ext = os.path.splitext(file)
                        if file_ext.lower() in extensions:
                            files_to_process.append(file_path)
        
        total_files = len(files_to_process)
        if total_files == 0:
            self.log_message("–§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", asym=asymmetric)
            return
        
        if asymmetric:
            self.root.after(0, lambda: self.asym_progress.config(maximum=total_files, value=0))
            self.root.after(0, lambda: self.asym_progress_var.set("–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"))
            self.root.after(0, lambda: self.current_file_var.set("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."))
        else:
            self.root.after(0, lambda: self.progress.config(maximum=total_files, value=0))
            self.root.after(0, lambda: self.file_progress_var.set("–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        success_count = 0
        for i, file_path in enumerate(files_to_process):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
                short_path = os.path.basename(file_path)
                if asymmetric:
                    self.root.after(0, lambda: self.current_file_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {short_path}..."))
                
                if operation == "encrypt":
                    if asymmetric:
                        result = self.encrypt_file_asymmetric(file_path)
                    else:
                        result = self.encrypt_file(file_path, password)
                    
                    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                    if result and delete_original:
                        try:
                            os.remove(file_path)
                            self.log_message(f"–£–¥–∞–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {file_path}", asym=asymmetric)
                        except Exception as e:
                            self.log_message(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_path} - {str(e)}", asym=asymmetric)
                else:
                    if asymmetric and file_path.endswith('.rsa'):
                        result = self.decrypt_file_asymmetric(file_path)
                    elif not asymmetric and file_path.endswith('.enc'):
                        result = self.decrypt_file(file_path, password)
                    else:
                        ext = ".rsa" if asymmetric else ".enc"
                        self.log_message(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ {ext}): {file_path}", asym=asymmetric)
                        result = False
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
                    if result and delete_original:
                        try:
                            os.remove(file_path)
                            self.log_message(f"–£–¥–∞–ª–µ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}", asym=asymmetric)
                        except Exception as e:
                            self.log_message(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_path} - {str(e)}", asym=asymmetric)
                
                if result:
                    success_count += 1
                    self.log_message(f"–£—Å–ø–µ—à–Ω–æ: {file_path}", asym=asymmetric)
                else:
                    self.log_message(f"–û—à–∏–±–∫–∞: {file_path}", asym=asymmetric)
            except Exception as e:
                self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {file_path} - {str(e)}", asym=asymmetric)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_value = i + 1
            percentage = int(progress_value / total_files * 100)
            
            if asymmetric:
                self.root.after(0, lambda v=progress_value: self.asym_progress.config(value=v))
                self.root.after(0, lambda p=percentage: self.asym_progress_var.set(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {p}%"))
            else:
                self.root.after(0, lambda v=progress_value: self.progress.config(value=v))
                self.root.after(0, lambda p=percentage: self.file_progress_var.set(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {p}%"))
        
        if asymmetric:
            self.root.after(0, lambda: self.current_file_var.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
        self.log_message(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_files}", asym=asymmetric)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return success_count, total_files
    
    def encrypt_folder(self):
        password = self.file_password.get().strip()
        if not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            return
        
        extensions_input = self.file_extensions.get().strip()
        if not extensions_input:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å —Ç–æ—á–∫–∞–º–∏
        extensions = set()
        for ext in extensions_input.split(","):
            ext_clean = ext.strip().lower()
            if ext_clean:
                if not ext_clean.startswith("."):
                    ext_clean = "." + ext_clean
                extensions.add(ext_clean)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_encryption():
            try:
                success, total = self.process_folder(
                    "encrypt",
                    password,
                    extensions,
                    self.recursive_var.get(),
                    self.delete_original.get(),
                    False
                )
                self.root.after(0, lambda: messagebox.showinfo(
                    "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    f"–£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {success}/{total} —Ñ–∞–π–ª–æ–≤\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
                ))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
                ))
        
        threading.Thread(target=run_encryption, daemon=True).start()
    
    def decrypt_folder(self):
        password = self.file_password.get().strip()
        if not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            return
        
        # –î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ .enc —Ñ–∞–π–ª—ã
        extensions = {".enc"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_decryption():
            try:
                success, total = self.process_folder(
                    "decrypt",
                    password,
                    extensions,
                    self.recursive_var.get(),
                    self.delete_original.get(),
                    False
                )
                self.root.after(0, lambda: messagebox.showinfo(
                    "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {success}/{total} —Ñ–∞–π–ª–æ–≤\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
                ))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {str(e)}"
                ))
        
        threading.Thread(target=run_decryption, daemon=True).start()
    
    def encrypt_asym_folder(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        if not self.public_key:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á")
            return
        
        path = self.encrypt_path.get()
        if not path or not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        extensions_input = self.asym_extensions.get().strip()
        if not extensions_input:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å —Ç–æ—á–∫–∞–º–∏
        extensions = set()
        for ext in extensions_input.split(","):
            ext_clean = ext.strip().lower()
            if ext_clean:
                if not ext_clean.startswith("."):
                    ext_clean = "." + ext_clean
                extensions.add(ext_clean)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_asym_encryption():
            try:
                success, total = self.process_folder(
                    "encrypt",
                    None,
                    extensions,
                    self.asym_recursive.get(),
                    self.asym_delete_original.get(),
                    True,
                    path
                )
                self.root.after(0, lambda: messagebox.showinfo(
                    "–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    f"–£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {success}/{total} —Ñ–∞–π–ª–æ–≤\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
                ))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
                ))
        
        threading.Thread(target=run_asym_encryption, daemon=True).start()
    
    def decrypt_asym_folder(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        if not self.private_key:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
            return
        
        path = self.decrypt_path.get()
        if not path or not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
            return
        
        # –î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ .rsa —Ñ–∞–π–ª—ã
        extensions = {".rsa"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_asym_decryption():
            try:
                success, total = self.process_folder(
                    "decrypt",
                    None,
                    extensions,
                    self.asym_recursive.get(),
                    self.asym_delete_original.get(),
                    True,
                    path
                )
                self.root.after(0, lambda: messagebox.showinfo(
                    "–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {success}/{total} —Ñ–∞–π–ª–æ–≤\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
                ))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {str(e)}"
                ))
        
        threading.Thread(target=run_asym_decryption, daemon=True).start()
    
    def encrypt_symmetric(self):
        text = self.sym_text.get("1.0", tk.END).strip()
        password = self.password_entry.get().strip()
        
        if not text or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        try:
            salt = os.urandom(16)
            key = self.derive_key(password, salt)
            f = Fernet(key)
            encrypted = f.encrypt(text.encode())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ª—å –≤–º–µ—Å—Ç–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            result = base64.urlsafe_b64encode(salt + encrypted).decode()
            self.sym_result.delete("1.0", tk.END)
            self.sym_result.insert(tk.END, result)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    def decrypt_symmetric(self):
        text = self.sym_text.get("1.0", tk.END).strip()
        password = self.password_entry.get().strip()
        
        if not text or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        try:
            data = base64.urlsafe_b64decode(text)
            salt = data[:16]
            encrypted = data[16:]
            
            key = self.derive_key(password, salt)
            f = Fernet(key)
            decrypted = f.decrypt(encrypted).decode()
            
            self.sym_result.delete("1.0", tk.END)
            self.sym_result.insert(tk.END, decrypted)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {str(e)}")
    
    def generate_keys(self):
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=2048,
                backend=default_backend()
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
            public_key = private_key.public_key()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª—ã
            private_pem = private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
            
            public_pem = public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            )
            
            # –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            private_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á",
                filetypes=(("PEM files", "*.pem"), ("All files", "*.*")),
                defaultextension=".pem"
            )
            
            if private_path:
                with open(private_path, 'wb') as f:
                    f.write(private_pem)
            
            public_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á",
                filetypes=(("PEM files", "*.pem"), ("All files", "*.*")),
                defaultextension=".pem"
            )
            
            if public_path:
                with open(public_path, 'wb') as f:
                    f.write(public_pem)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {str(e)}")
    
    def load_public_key(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞",
            filetypes=(("PEM files", "*.pem"), ("All files", "*.*"))
        )
        if file_path:
            try:
                with open(file_path, "rb") as key_file:
                    public_key = serialization.load_pem_public_key(
                        key_file.read(),
                        backend=default_backend()
                    )
                self.public_key = public_key
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞: {str(e)}")
    
    def load_private_key(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞",
            filetypes=(("PEM files", "*.pem"), ("All files", "*.*"))
        )
        if file_path:
            try:
                with open(file_path, "rb") as key_file:
                    private_key = serialization.load_pem_private_key(
                        key_file.read(),
                        password=None,
                        backend=default_backend()
                    )
                self.private_key = private_key
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞: {str(e)}")
    
    def encrypt_asymmetric(self):
        text = self.asym_text.get("1.0", tk.END).strip()
        
        if not text:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            return
        
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        if not self.public_key:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á")
            return
        
        try:
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
            encrypted = self.public_key.encrypt(
                text.encode(),
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            
            result = base64.b64encode(encrypted).decode()
            self.asym_result.delete("1.0", tk.END)
            self.asym_result.insert(tk.END, result)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    def decrypt_asymmetric(self):
        text = self.asym_text.get("1.0", tk.END).strip()
        
        if not text:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            return
        
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        if not self.private_key:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
            return
        
        try:
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
            decrypted = self.private_key.decrypt(
                base64.b64decode(text),
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            ).decode()
            
            self.asym_result.delete("1.0", tk.END)
            self.asym_result.insert(tk.END, decrypted)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {str(e)}")
    
    def copy_password(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        password = self.password_entry.get()
        if password:
            self.root.clipboard_clear()
            self.root.clipboard_append(password)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –ø—É—Å—Ç–æ–µ")
    
    def paste_password(self):
        """–í—Å—Ç–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            password = self.root.clipboard_get()
            if password:
                self.password_entry.delete(0, tk.END)
                self.password_entry.insert(0, password)
            else:
                messagebox.showwarning("–ü—É—Å—Ç–æ", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
        except tk.TclError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    
    def copy_symmetric_result(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        result = self.sym_result.get("1.0", tk.END).strip()
        if result:
            self.root.clipboard_clear()
            self.root.clipboard_append(result)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç")
    
    def paste_text(self):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            text = self.root.clipboard_get()
            if text:
                self.sym_text.delete("1.0", tk.END)
                self.sym_text.insert(tk.END, text)
            else:
                messagebox.showwarning("–ü—É—Å—Ç–æ", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
        except tk.TclError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    
    def copy_asymmetric_result(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        result = self.asym_result.get("1.0", tk.END).strip()
        if result:
            self.root.clipboard_clear()
            self.root.clipboard_append(result)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç")
    
    def paste_asym_text(self):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            text = self.root.clipboard_get()
            if text:
                self.asym_text.delete("1.0", tk.END)
                self.asym_text.insert(tk.END, text)
            else:
                messagebox.showwarning("–ü—É—Å—Ç–æ", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
        except tk.TclError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    
    def clear_symmetric(self):
        self.sym_text.delete("1.0", tk.END)
        self.sym_result.delete("1.0", tk.END)
        self.password_entry.delete(0, tk.END)
    
    def clear_asymmetric(self):
        self.asym_text.delete("1.0", tk.END)
        self.asym_result.delete("1.0", tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = CryptoApp(root)
    root.mainloop()
