import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from PIL import Image, ImageTk
import threading
import os
import sys
import math

class SteganographyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏–∏")
        self.root.geometry("700x650")
        self.root.resizable(True, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_style()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tab_control = ttk.Notebook(root)
        self.encode_tab = ttk.Frame(self.tab_control)
        self.decode_tab = ttk.Frame(self.tab_control)
        
        self.tab_control.add(self.encode_tab, text='üñºÔ∏è –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        self.tab_control.add(self.decode_tab, text='üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        self.tab_control.pack(expand=1, fill="both", padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_encode_tab()
        self.create_decode_tab()
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W, style='Status.TLabel')
        status_bar.pack(side=tk.BOTTOM, fill=tk.X, padx=2, pady=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.cancel_operation = False
        self.progress = None
    
    def setup_style(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.configure("TButton", padding=6, font=('Arial', 10))
        style.configure("TLabel", font=('Arial', 10))
        style.configure("TFrame", background="#f0f0f0")
        style.configure("TLabelframe", font=('Arial', 10, 'bold'))
        style.configure("TLabelframe.Label", font=('Arial', 10, 'bold'))
        style.configure("Status.TLabel", background="#e0e0e0", font=('Arial', 9))
        style.configure("Bold.TLabel", font=('Arial', 10, 'bold'))
    
    def create_encode_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        frame = ttk.LabelFrame(self.encode_tab, text="–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_frame = ttk.Frame(frame)
        file_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(file_frame, text="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", style='Bold.TLabel').pack(side=tk.LEFT, padx=(0, 5))
        self.source_path = tk.StringVar()
        source_entry = ttk.Entry(file_frame, textvariable=self.source_path, width=50)
        source_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        ttk.Button(file_frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...", command=self.browse_source_image, width=12).pack(side=tk.LEFT)
        
        # –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.preview_frame = ttk.LabelFrame(frame, text="–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.preview_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.preview_label = ttk.Label(self.preview_frame, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        self.preview_label.pack(padx=10, pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        msg_frame = ttk.LabelFrame(frame, text="–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        msg_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        placeholder_text = "–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
        self.message_text = scrolledtext.ScrolledText(msg_frame, height=5, wrap=tk.WORD, font=('Arial', 10))
        self.message_text.insert("1.0", placeholder_text)
        self.message_text.config(fg="grey")
        self.message_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        self.message_text.bind("<FocusIn>", self.on_message_focus_in)
        self.message_text.bind("<FocusOut>", self.on_message_focus_out)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        options_frame = ttk.Frame(frame)
        options_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        
        ttk.Label(options_frame, text="–ü–∞—Ä–æ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", style='Bold.TLabel').pack(side=tk.LEFT, padx=(0, 5))
        self.password_var = tk.StringVar()
        pwd_entry = ttk.Entry(options_frame, textvariable=self.password_var, show="‚Ä¢", width=20)
        pwd_entry.pack(side=tk.LEFT)
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
        self.size_label = ttk.Label(options_frame, text="–î–æ—Å—Ç—É–ø–Ω–æ: 0 —Å–∏–º–≤–æ–ª–æ–≤")
        self.size_label.pack(side=tk.RIGHT, padx=10)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output_frame = ttk.Frame(frame)
        output_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(output_frame, text="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", style='Bold.TLabel').pack(side=tk.LEFT, padx=(0, 5))
        self.output_path = tk.StringVar()
        output_entry = ttk.Entry(output_frame, textvariable=self.output_path, width=50)
        output_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        ttk.Button(output_frame, text="–£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å...", command=self.browse_output_image, width=12).pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_frame = ttk.Frame(frame)
        self.progress_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(fill=tk.X, padx=5, pady=10)
        
        self.encode_btn = ttk.Button(btn_frame, text="–ù–∞—á–∞—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", command=self.start_encode_thread, style='TButton')
        self.encode_btn.pack(side=tk.LEFT, padx=(0, 10))
        self.cancel_btn = ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", command=self.cancel_operation, state=tk.DISABLED)
        self.cancel_btn.pack(side=tk.LEFT)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.source_path.trace_add("write", self.update_size_calculation)
    
    def create_decode_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        frame = ttk.LabelFrame(self.decode_tab, text="–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_frame = ttk.Frame(frame)
        file_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(file_frame, text="–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", style='Bold.TLabel').pack(side=tk.LEFT, padx=(0, 5))
        self.encoded_path = tk.StringVar()
        encoded_entry = ttk.Entry(file_frame, textvariable=self.encoded_path, width=50)
        encoded_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        ttk.Button(file_frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...", command=self.browse_encoded_image, width=12).pack(side=tk.LEFT)
        
        # –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.decode_preview_frame = ttk.LabelFrame(frame, text="–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.decode_preview_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.decode_preview_label = ttk.Label(self.decode_preview_frame, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        self.decode_preview_label.pack(padx=10, pady=10)
        
        # –û–ø—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        options_frame = ttk.Frame(frame)
        options_frame.pack(fill=tk.X, padx=5, pady=(5, 0))
        
        ttk.Label(options_frame, text="–ü–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è):", style='Bold.TLabel').pack(side=tk.LEFT, padx=(0, 5))
        self.decode_password_var = tk.StringVar()
        pwd_entry = ttk.Entry(options_frame, textvariable=self.decode_password_var, show="‚Ä¢", width=20)
        pwd_entry.pack(side=tk.LEFT)
        
        # –ü–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        result_frame = ttk.LabelFrame(frame, text="–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
        result_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.result_text = scrolledtext.ScrolledText(result_frame, height=5, wrap=tk.WORD, font=('Arial', 10))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        self.result_text.insert("1.0", "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        self.result_text.config(fg="grey", state=tk.NORMAL)
        self.result_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.result_text.config(state=tk.DISABLED)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        self.result_text.bind("<FocusIn>", self.on_result_focus_in)
        self.result_text.bind("<FocusOut>", self.on_result_focus_out)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.decode_progress_frame = ttk.Frame(frame)
        self.decode_progress_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(fill=tk.X, padx=5, pady=10)
        
        self.decode_btn = ttk.Button(btn_frame, text="–ù–∞—á–∞—Ç—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", command=self.start_decode_thread)
        self.decode_btn.pack(side=tk.LEFT, padx=(0, 10))
        self.decode_cancel_btn = ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", command=self.cancel_operation, state=tk.DISABLED)
        self.decode_cancel_btn.pack(side=tk.LEFT)
        ttk.Button(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", command=self.clear_decode).pack(side=tk.RIGHT)
    
    def on_message_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
        if self.message_text.get("1.0", "end-1c") == placeholder:
            self.message_text.delete("1.0", "end")
            self.message_text.config(fg="black")
    
    def on_message_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.message_text.get("1.0", "end-1c").strip():
            placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
            self.message_text.insert("1.0", placeholder)
            self.message_text.config(fg="grey")
    
    def on_result_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        placeholder = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        current_text = self.result_text.get("1.0", "end-1c")
        
        if current_text == placeholder:
            self.result_text.config(state=tk.NORMAL)
            self.result_text.delete("1.0", "end")
            self.result_text.config(fg="black")
    
    def on_result_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        current_text = self.result_text.get("1.0", "end-1c")
        placeholder = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        
        if not current_text.strip():
            self.result_text.config(state=tk.NORMAL)
            self.result_text.insert("1.0", placeholder)
            self.result_text.config(fg="grey")
            self.result_text.config(state=tk.DISABLED)
    
    def browse_source_image(self):
        """–í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png;*.jpg;*.jpeg;*.bmp;*.tiff"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if path:
            self.source_path.set(path)
            base, ext = os.path.splitext(path)
            self.output_path.set(f"{base}_–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.png")
            self.show_preview(path, self.preview_label, self.preview_frame)
            self.update_size_calculation()
    
    def browse_output_image(self):
        """–í—ã–±–æ—Ä –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            defaultextension=".png",
            filetypes=[("PNG —Ñ–∞–π–ª—ã", "*.png"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if path:
            self.output_path.set(path)
    
    def browse_encoded_image(self):
        """–í—ã–±–æ—Ä –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png;*.jpg;*.jpeg;*.bmp;*.tiff"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if path:
            self.encoded_path.set(path)
            self.show_preview(path, self.decode_preview_label, self.decode_preview_frame)
    
    def show_preview(self, path, label_widget, frame_widget):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            img = Image.open(path)
            img.thumbnail((250, 250))
            photo = ImageTk.PhotoImage(img)
            label_widget.configure(image=photo, text="")
            label_widget.image = photo
            frame_widget.configure(text=f"–ü—Ä–µ–≤—å—é: {os.path.basename(path)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{str(e)}")
            label_widget.configure(image=None, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def update_size_calculation(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        source = self.source_path.get()
        if not source or not os.path.exists(source):
            self.size_label.config(text="–î–æ—Å—Ç—É–ø–Ω–æ: 0 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        try:
            img = Image.open(source)
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (3 –±–∏—Ç–∞ –Ω–∞ –ø–∏–∫—Å–µ–ª—å)
            max_bits = img.width * img.height * 3
            max_chars = max_bits // 8 - 1  # –ú–∏–Ω—É—Å 1 –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –∫–æ–Ω—Ü–∞
            
            # –£—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            password = self.password_var.get()
            if password:
                max_chars = min(max_chars, max_chars - len(password))
            
            self.size_label.config(text=f"–î–æ—Å—Ç—É–ø–Ω–æ: {max_chars} —Å–∏–º–≤–æ–ª–æ–≤")
        except:
            self.size_label.config(text="–î–æ—Å—Ç—É–ø–Ω–æ: 0 —Å–∏–º–≤–æ–ª–æ–≤")
    
    def start_encode_thread(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–¥–µ–Ω –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
        placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
        current_text = self.message_text.get("1.0", "end-1c")
        
        if current_text.strip() == "" or current_text == placeholder:
            messagebox.showwarning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
            
        self.cancel_operation = False
        self.encode_btn.config(state=tk.DISABLED)
        self.cancel_btn.config(state=tk.NORMAL)
        self.status_var.set("–ù–∞—á–∞—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress = ttk.Progressbar(
            self.progress_frame, 
            orient=tk.HORIZONTAL, 
            length=200, 
            mode='indeterminate'
        )
        self.progress.pack(pady=5)
        self.progress.start()
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.encode_message, daemon=True).start()
    
    def start_decode_thread(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.cancel_operation = False
        self.decode_btn.config(state=tk.DISABLED)
        self.decode_cancel_btn.config(state=tk.NORMAL)
        self.status_var.set("–ù–∞—á–∞—Ç–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.decode_progress = ttk.Progressbar(
            self.decode_progress_frame, 
            orient=tk.HORIZONTAL, 
            length=200, 
            mode='indeterminate'
        )
        self.decode_progress.pack(pady=5)
        self.decode_progress.start()
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.decode_message, daemon=True).start()
    
    def cancel_operation(self):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.cancel_operation = True
        self.status_var.set("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def clear_decode(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        placeholder = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        self.result_text.insert("1.0", placeholder)
        self.result_text.config(fg="grey")
        self.result_text.config(state=tk.DISABLED)
        
        self.decode_password_var.set("")
        self.status_var.set("–ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–æ")
    
    def encrypt_decrypt(self, text, password):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        if not password:
            return text
            
        encrypted = []
        pwd_len = len(password)
        for i, char in enumerate(text):
            key_char = password[i % pwd_len]
            encrypted_char = chr(ord(char) ^ ord(key_char))
            encrypted.append(encrypted_char)
        return ''.join(encrypted)
    
    def encode_message(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        source = self.source_path.get()
        output = self.output_path.get()
        password = self.password_var.get()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        current_text = self.message_text.get("1.0", "end-1c")
        placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
        message = current_text.strip() if current_text != placeholder else ""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not source or not os.path.exists(source):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            self.finish_operation()
            return
            
        if not message:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!")
            self.finish_operation()
            return
            
        if not output:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!")
            self.finish_operation()
            return
        
        try:
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if password:
                message = self.encrypt_decrypt(message, password)
            
            img = Image.open(source)
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            binary_msg = ''.join(format(ord(c), '08b') for c in message)
            binary_msg += '00000000'  # –ú–∞—Ä–∫–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            max_bits = img.width * img.height * 3
            if len(binary_msg) > max_bits:
                available_chars = max_bits // 8 - 1
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞", 
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä: {available_chars} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤"
                )
                self.finish_operation()
                return
            
            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            pixels = list(img.getdata())
            data_index = 0
            new_pixels = []
            total_pixels = len(pixels)
            
            for i, pixel in enumerate(pixels):
                if self.cancel_operation:
                    break
                    
                if data_index < len(binary_msg):
                    r, g, b = pixel
                    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–ª–∞–¥—à–∏—Ö –±–∏—Ç–æ–≤
                    r = (r & 0xFE) | int(binary_msg[data_index]); data_index += 1
                    if data_index < len(binary_msg):
                        g = (g & 0xFE) | int(binary_msg[data_index]); data_index += 1
                    if data_index < len(binary_msg):
                        b = (b & 0xFE) | int(binary_msg[data_index]); data_index += 1
                    new_pixels.append((r, g, b))
                else:
                    new_pixels.append(pixel)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 1000 –ø–∏–∫—Å–µ–ª–µ–π
                if i % 1000 == 0:
                    progress_percent = int(i / total_pixels * 100)
                    self.status_var.set(f"–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {progress_percent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            if self.cancel_operation:
                self.status_var.set("–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
                
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            encoded_img = Image.new('RGB', img.size)
            encoded_img.putdata(new_pixels)
            encoded_img.save(output, "PNG")
            
            self.status_var.set("–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö", 
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n"
                f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output}"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_text.delete("1.0", tk.END)
            self.message_text.config(fg="grey")
            self.message_text.insert("1.0", placeholder)
            
        except Exception as e:
            self.status_var.set(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{str(e)}")
        finally:
            self.finish_operation()
    
    def decode_message(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        path = self.encoded_path.get()
        password = self.decode_password_var.get()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not path or not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            self.finish_operation(decode=True)
            return
        
        try:
            img = Image.open(path)
            if img.mode != 'RGB':
                img = img.convert('RGB')
                
            pixels = list(img.getdata())
            binary_data = []
            message = []
            byte = ''
            found_end = False
            total_pixels = len(pixels)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∏—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, pixel in enumerate(pixels):
                if self.cancel_operation:
                    break
                    
                r, g, b = pixel
                binary_data.append(r & 1)
                binary_data.append(g & 1)
                binary_data.append(b & 1)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if i % 1000 == 0:
                    progress_percent = int(i / total_pixels * 100)
                    self.status_var.set(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {progress_percent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            if self.cancel_operation:
                self.status_var.set("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∏—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç
            for bit in binary_data:
                byte += str(bit)
                if len(byte) == 8:
                    if byte == '00000000':
                        found_end = True
                        break
                    message.append(chr(int(byte, 2)))
                    byte = ''
            
            decoded_message = ''.join(message)
            
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if password:
                decoded_message = self.encrypt_decrypt(decoded_message, password)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.result_text.config(state=tk.NORMAL)
            self.result_text.delete(1.0, tk.END)
            
            if decoded_message:
                self.result_text.insert(tk.END, decoded_message)
                self.result_text.config(fg="black")
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                placeholder = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
                self.result_text.insert(tk.END, placeholder)
                self.result_text.config(fg="grey")
            
            self.result_text.config(state=tk.DISABLED)
            
            if not found_end:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    "–ú–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è."
                )
            
            self.status_var.set("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö", 
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n"
                f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(decoded_message)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            
        except Exception as e:
            self.status_var.set(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{str(e)}")
        finally:
            self.finish_operation(decode=True)
    
    def finish_operation(self, decode=False):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if decode:
            if hasattr(self, 'decode_progress'):
                self.decode_progress.stop()
                self.decode_progress.pack_forget()
            self.decode_btn.config(state=tk.NORMAL)
            self.decode_cancel_btn.config(state=tk.DISABLED)
        else:
            if self.progress:
                self.progress.stop()
                self.progress.pack_forget()
            self.encode_btn.config(state=tk.NORMAL)
            self.cancel_btn.config(state=tk.DISABLED)

if __name__ == "__main__":
    root = tk.Tk()
    # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        root.iconbitmap(default='stegano_icon.ico')
    except:
        pass
    
    app = SteganographyApp(root)
    root.mainloop()
